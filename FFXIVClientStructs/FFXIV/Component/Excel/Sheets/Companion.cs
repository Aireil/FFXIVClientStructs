// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x30)]
public unsafe partial struct Companion {
    [FieldOffset(0x00)] public int Singular_Offset;
    [FieldOffset(0x04)] public int Plural_Offset;
    [FieldOffset(0x08)] public sbyte Adjective;
    [FieldOffset(0x09)] public sbyte PossessivePronoun;
    [FieldOffset(0x0A)] public sbyte StartsWithVowel;
    [FieldOffset(0x0B)] public sbyte Unknown0;
    [FieldOffset(0x0C)] public sbyte Pronoun;
    [FieldOffset(0x0D)] public sbyte Article;
    /// <remarks>ModelChara</remarks>
    [FieldOffset(0x10)] public ushort Model;
    [FieldOffset(0x12)] public ushort Priority;
    [FieldOffset(0x14)] public ushort Enemy;
    [FieldOffset(0x16)] public ushort Icon;
    [FieldOffset(0x18)] public ushort Order;
    [FieldOffset(0x1A)] public ushort HP;
    [FieldOffset(0x1C)] public ushort SkillAngle;
    [FieldOffset(0x1E)] public ushort Unknown1;
    [FieldOffset(0x20)] public byte Scale;
    [FieldOffset(0x21)] public byte InactiveIdle0;
    [FieldOffset(0x22)] public byte InactiveIdle1;
    [FieldOffset(0x23)] public byte InactiveBattle;
    [FieldOffset(0x24)] public byte InactiveWandering;
    /// <remarks>CompanionMove</remarks>
    [FieldOffset(0x25)] public byte Behavior;
    [FieldOffset(0x26)] public byte Special;
    [FieldOffset(0x27)] public byte WanderingWait;
    [FieldOffset(0x28)] public byte Unknown2;
    [FieldOffset(0x29)] public byte Cost;
    [FieldOffset(0x2A)] public byte Unknown3;
    [FieldOffset(0x2B)] public byte SkillCost;
    [FieldOffset(0x2C)] public byte Unknown4;
    /// <remarks>MinionRace</remarks>
    [FieldOffset(0x2D)] public byte MinionRace;
    [FieldOffset(0x2E)] public BitField2EFlags BitField2E;
    public bool Unknown5 => BitField2E.HasFlag(BitField2EFlags.Unknown5);
    public bool Unknown6 => BitField2E.HasFlag(BitField2EFlags.Unknown6);
    public bool Unknown7 => BitField2E.HasFlag(BitField2EFlags.Unknown7);
    public bool Unknown8 => BitField2E.HasFlag(BitField2EFlags.Unknown8);
    public bool Unknown9 => BitField2E.HasFlag(BitField2EFlags.Unknown9);
    public bool Battle => BitField2E.HasFlag(BitField2EFlags.Battle);
    public bool Roulette => BitField2E.HasFlag(BitField2EFlags.Roulette);
    public bool IdleAnimation => BitField2E.HasFlag(BitField2EFlags.IdleAnimation);

    [Flags]
    public enum BitField2EFlags : byte {
    	Unknown5 = 1 << 0,
    	Unknown6 = 1 << 1,
    	Unknown7 = 1 << 2,
    	Unknown8 = 1 << 3,
    	Unknown9 = 1 << 4,
    	Battle = 1 << 5,
    	Roulette = 1 << 6,
    	IdleAnimation = 1 << 7,
    }
}
