// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[GenerateInterop]
[StructLayout(LayoutKind.Explicit, Size = 0x9E8)]
public unsafe partial struct Quest {
    [FieldOffset(0x00)] public int Name_Offset;
    [FieldOffset(0x04), FixedSizeArray] internal FixedSizeArray50<QuestParamsStruct> _questParams;
    [FieldOffset(0x194), FixedSizeArray] internal FixedSizeArray64<QuestListenerParamsStruct> _questListenerParams;
    [FieldOffset(0x594), FixedSizeArray] internal FixedSizeArray24<TodoParamsStruct> _todoParams;
    [FieldOffset(0x8F4)] public uint GilReward;
    /// <remarks>Item</remarks>
    [FieldOffset(0x8F8)] public uint CurrencyReward;
    [FieldOffset(0x8FC)] public uint CurrencyRewardCount;
    [FieldOffset(0x900), FixedSizeArray] internal FixedSizeArray7<uint> _reward;
    [FieldOffset(0x91C), FixedSizeArray] internal FixedSizeArray5<uint> _optionalItemReward;
    /// <remarks>InstanceContent</remarks>
    [FieldOffset(0x930)] public uint InstanceContentUnlock;
    [FieldOffset(0x934)] public ushort ExpFactor;
    /// <remarks>Emote</remarks>
    [FieldOffset(0x936)] public ushort EmoteReward;
    /// <remarks>Action</remarks>
    [FieldOffset(0x938)] public ushort ActionReward;
    [FieldOffset(0x93A), FixedSizeArray] internal FixedSizeArray2<ushort> _systemReward;
    [FieldOffset(0x93E)] public ushort GCTypeReward;
    [FieldOffset(0x940), FixedSizeArray] internal FixedSizeArray3<byte> _itemCatalyst;
    [FieldOffset(0x943), FixedSizeArray] internal FixedSizeArray3<byte> _itemCountCatalyst;
    [FieldOffset(0x946)] public byte ItemRewardType;
    [FieldOffset(0x947), FixedSizeArray] internal FixedSizeArray7<byte> _itemCountReward;
    [FieldOffset(0x94E), FixedSizeArray] internal FixedSizeArray7<byte> _rewardStain;
    [FieldOffset(0x955), FixedSizeArray] internal FixedSizeArray5<byte> _optionalItemCountReward;
    [FieldOffset(0x95A), FixedSizeArray] internal FixedSizeArray5<byte> _optionalItemStainReward;
    [FieldOffset(0x95F), FixedSizeArray] internal FixedSizeArray2<byte> _generalActionReward;
    /// <remarks>QuestRewardOther</remarks>
    [FieldOffset(0x961)] public byte OtherReward;
    [FieldOffset(0x962)] public byte Tomestone;
    [FieldOffset(0x963)] public byte TomestoneReward;
    [FieldOffset(0x964)] public byte TomestoneCountReward;
    [FieldOffset(0x965)] public byte ReputationReward;
    [FieldOffset(0x966)] public bool Unknown0;
    [FieldOffset(0x967)] public bool Unknown1;
    [FieldOffset(0x968)] public bool Unknown2;
    [FieldOffset(0x969)] public bool Unknown3;
    [FieldOffset(0x96A)] public bool Unknown4;
    [FieldOffset(0x96B)] public bool Unknown5;
    [FieldOffset(0x96C)] public bool Unknown6;
    [FieldOffset(0x96D), FixedSizeArray] internal FixedSizeArray5<bool> _optionalItemIsHQReward;
    [FieldOffset(0x974)] public int Id_Offset;
    [FieldOffset(0x978), FixedSizeArray] internal FixedSizeArray3<uint> _previousQuest;
    [FieldOffset(0x984), FixedSizeArray] internal FixedSizeArray2<uint> _questLock;
    [FieldOffset(0x98C), FixedSizeArray] internal FixedSizeArray3<uint> _instanceContent;
    /// <remarks>EObjName, ENpcResident</remarks>
    [FieldOffset(0x998)] public uint IssuerStart;
    /// <remarks>Level</remarks>
    [FieldOffset(0x99C)] public uint IssuerLocation;
    /// <remarks>EObjName, ENpcResident</remarks>
    [FieldOffset(0x9A0)] public uint TargetEnd;
    /// <remarks>JournalGenre</remarks>
    [FieldOffset(0x9A4)] public uint JournalGenre;
    [FieldOffset(0x9A8)] public uint Icon;
    [FieldOffset(0x9AC)] public uint IconSpecial;
    /// <remarks>Mount</remarks>
    [FieldOffset(0x9B0)] public int MountRequired;
    [FieldOffset(0x9B4), FixedSizeArray] internal FixedSizeArray2<ushort> _classJobLevel;
    [FieldOffset(0x9B8)] public ushort Header;
    [FieldOffset(0x9BA)] public ushort BellStart;
    [FieldOffset(0x9BC)] public ushort BellEnd;
    [FieldOffset(0x9BE)] public ushort BeastReputationValue;
    /// <remarks>Behavior</remarks>
    [FieldOffset(0x9C0)] public ushort ClientBehavior;
    /// <remarks>QuestClassJobSupply</remarks>
    [FieldOffset(0x9C2)] public ushort QuestClassJobSupply;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x9C4)] public ushort PlaceName;
    [FieldOffset(0x9C6)] public ushort SortKey;
    /// <remarks>ExVersion</remarks>
    [FieldOffset(0x9C8)] public byte Expansion;
    /// <remarks>ClassJobCategory</remarks>
    [FieldOffset(0x9C9)] public byte ClassJobCategory0;
    [FieldOffset(0x9CA)] public byte QuestLevelOffset;
    /// <remarks>ClassJobCategory</remarks>
    [FieldOffset(0x9CB)] public byte ClassJobCategory1;
    [FieldOffset(0x9CC)] public byte PreviousQuestJoin;
    [FieldOffset(0x9CD)] public byte Unknown7;
    [FieldOffset(0x9CE)] public byte QuestLockJoin;
    [FieldOffset(0x9CF)] public byte Unknown8;
    [FieldOffset(0x9D0)] public byte Unknown9;
    /// <remarks>ClassJob</remarks>
    [FieldOffset(0x9D1)] public byte ClassJobUnlock;
    /// <remarks>GrandCompany</remarks>
    [FieldOffset(0x9D2)] public byte GrandCompany;
    /// <remarks>GrandCompanyRank</remarks>
    [FieldOffset(0x9D3)] public byte GrandCompanyRank;
    [FieldOffset(0x9D4)] public byte InstanceContentJoin;
    /// <remarks>Festival</remarks>
    [FieldOffset(0x9D5)] public byte Festival;
    [FieldOffset(0x9D6)] public byte FestivalBegin;
    [FieldOffset(0x9D7)] public byte FestivalEnd;
    /// <remarks>BeastTribe</remarks>
    [FieldOffset(0x9D8)] public byte BeastTribe;
    /// <remarks>BeastReputationRank</remarks>
    [FieldOffset(0x9D9)] public byte BeastReputationRank;
    /// <remarks>SatisfactionNpc</remarks>
    [FieldOffset(0x9DA)] public byte SatisfactionNpc;
    [FieldOffset(0x9DB)] public byte SatisfactionLevel;
    /// <remarks>DeliveryQuest</remarks>
    [FieldOffset(0x9DC)] public byte DeliveryQuest;
    [FieldOffset(0x9DD)] public byte RepeatIntervalType;
    /// <remarks>QuestRepeatFlag</remarks>
    [FieldOffset(0x9DE)] public byte QuestRepeatFlag;
    [FieldOffset(0x9DF)] public byte Type;
    [FieldOffset(0x9E0)] public byte Unknown_70;
    [FieldOffset(0x9E1)] public byte LevelMax;
    /// <remarks>ClassJob</remarks>
    [FieldOffset(0x9E2)] public byte ClassJobRequired;
    /// <remarks>QuestRewardOther</remarks>
    [FieldOffset(0x9E3)] public byte QuestRewardOtherDisplay;
    [FieldOffset(0x9E4)] public byte Unknown10;
    /// <remarks>EventIconType</remarks>
    [FieldOffset(0x9E5)] public byte EventIconType;
    [FieldOffset(0x9E6)] public byte Unknown11;
    [FieldOffset(0x9E7)] public BitField9E7Flags BitField9E7;
    public bool IsHouseRequired => BitField9E7.HasFlag(BitField9E7Flags.IsHouseRequired);
    public bool IsRepeatable => BitField9E7.HasFlag(BitField9E7Flags.IsRepeatable);
    public bool CanCancel => BitField9E7.HasFlag(BitField9E7Flags.CanCancel);
    public bool Introduction => BitField9E7.HasFlag(BitField9E7Flags.Introduction);
    public bool HideOfferIcon => BitField9E7.HasFlag(BitField9E7Flags.HideOfferIcon);
    public bool Unknown12 => BitField9E7.HasFlag(BitField9E7Flags.Unknown12);
    public bool Unknown13 => BitField9E7.HasFlag(BitField9E7Flags.Unknown13);

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public partial struct QuestParamsStruct {
        [FieldOffset(0x00)] public int ScriptInstruction_Offset;
        [FieldOffset(0x04)] public uint ScriptArg;
    }
    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public partial struct QuestListenerParamsStruct {
        [FieldOffset(0x00)] public uint Listener;
        [FieldOffset(0x04)] public uint ConditionValue;
        [FieldOffset(0x08)] public ushort Behavior;
        [FieldOffset(0x0A)] public byte ActorSpawnSeq;
        [FieldOffset(0x0B)] public byte ActorDespawnSeq;
        [FieldOffset(0x0C)] public byte QuestUInt8A;
        [FieldOffset(0x0D)] public byte ConditionType;
        [FieldOffset(0x0E)] public byte ConditionOperator;
        [FieldOffset(0x0F)] public BitField0FFlags BitField0F;
        public bool VisibleBool => BitField0F.HasFlag(BitField0FFlags.VisibleBool);
        public bool ConditionBool => BitField0F.HasFlag(BitField0FFlags.ConditionBool);
        public bool ItemBool => BitField0F.HasFlag(BitField0FFlags.ItemBool);
        public bool AnnounceBool => BitField0F.HasFlag(BitField0FFlags.AnnounceBool);
        public bool BehaviorBool => BitField0F.HasFlag(BitField0FFlags.BehaviorBool);
        public bool AcceptBool => BitField0F.HasFlag(BitField0FFlags.AcceptBool);
        public bool QualifiedBool => BitField0F.HasFlag(BitField0FFlags.QualifiedBool);
        public bool CanTargetBool => BitField0F.HasFlag(BitField0FFlags.CanTargetBool);
    
        [Flags]
        public enum BitField0FFlags : byte {
        	VisibleBool = 1 << 0,
        	ConditionBool = 1 << 1,
        	ItemBool = 1 << 2,
        	AnnounceBool = 1 << 3,
        	BehaviorBool = 1 << 4,
        	AcceptBool = 1 << 5,
        	QualifiedBool = 1 << 6,
        	CanTargetBool = 1 << 7,
        }
    }
    [GenerateInterop]
    [StructLayout(LayoutKind.Explicit, Size = 0x24)]
    public partial struct TodoParamsStruct {
        [FieldOffset(0x00), FixedSizeArray] internal FixedSizeArray8<uint> _toDoLocation;
        [FieldOffset(0x20)] public byte ToDoCompleteSeq;
        [FieldOffset(0x21)] public byte ToDoQty;
        [FieldOffset(0x22)] public byte CountableNum;
    }
    [Flags]
    public enum BitField9E7Flags : byte {
    	IsHouseRequired = 1 << 0,
    	IsRepeatable = 1 << 1,
    	CanCancel = 1 << 2,
    	Introduction = 1 << 3,
    	HideOfferIcon = 1 << 4,
    	Unknown12 = 1 << 5,
    	Unknown13 = 1 << 6,
    }
}
