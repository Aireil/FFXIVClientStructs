// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x40)]
public unsafe partial struct Action {
    [FieldOffset(0x00)] public int Name_Offset;
    /// <remarks>ChocoboTaxiStand, CraftLeve, CustomTalk, DefaultTalk, FccShop, GCShop, GilShop, GuildleveAssignment, GuildOrderGuide, GuildOrderOfficer, Quest, SpecialShop, Story, SwitchTalk, TopicSelect, TripleTriad, Warp</remarks>
    [FieldOffset(0x04)] public uint UnlockLink;
    [FieldOffset(0x08)] public ushort Icon;
    /// <remarks>ActionCastVFX</remarks>
    [FieldOffset(0x0A)] public ushort VFX;
    /// <remarks>ActionTimeline</remarks>
    [FieldOffset(0x0C)] public ushort ActionTimelineHit;
    [FieldOffset(0x0E)] public ushort PrimaryCostValue;
    [FieldOffset(0x10)] public ushort SecondaryCostValue;
    /// <remarks>Action</remarks>
    [FieldOffset(0x12)] public ushort ActionCombo;
    [FieldOffset(0x14)] public ushort Cast100ms;
    [FieldOffset(0x16)] public ushort Recast100ms;
    /// <remarks>Status</remarks>
    [FieldOffset(0x18)] public ushort StatusGainSelf;
    /// <remarks>Omen</remarks>
    [FieldOffset(0x1A)] public ushort Omen;
    [FieldOffset(0x1C)] public ushort Unknown0;
    /// <remarks>ActionTimeline</remarks>
    [FieldOffset(0x1E)] public short AnimationEnd;
    /// <remarks>ActionCategory</remarks>
    [FieldOffset(0x20)] public byte ActionCategory;
    [FieldOffset(0x21)] public byte Unknown1;
    /// <remarks>ActionCastTimeline</remarks>
    [FieldOffset(0x22)] public byte AnimationStart;
    [FieldOffset(0x23)] public byte Unknown2;
    [FieldOffset(0x24)] public byte BehaviourType;
    [FieldOffset(0x25)] public byte ClassJobLevel;
    [FieldOffset(0x26)] public byte CastType;
    [FieldOffset(0x27)] public byte EffectRange;
    [FieldOffset(0x28)] public byte XAxisModifier;
    [FieldOffset(0x29)] public byte PrimaryCostType;
    [FieldOffset(0x2A)] public byte SecondaryCostType;
    [FieldOffset(0x2B)] public byte ExtraCastTime100ms;
    [FieldOffset(0x2C)] public byte CooldownGroup;
    [FieldOffset(0x2D)] public byte AdditionalCooldownGroup;
    [FieldOffset(0x2E)] public byte MaxCharges;
    [FieldOffset(0x2F)] public byte Aspect;
    /// <remarks>ActionProcStatus</remarks>
    [FieldOffset(0x30)] public byte ActionProcStatus;
    [FieldOffset(0x31)] public byte Unknown4;
    /// <remarks>ClassJobCategory</remarks>
    [FieldOffset(0x32)] public byte ClassJobCategory;
    [FieldOffset(0x33)] public byte Unknown5;
    [FieldOffset(0x34)] public byte Unknown6;
    [FieldOffset(0x35)] public byte Unknown_70;
    /// <remarks>ClassJob</remarks>
    [FieldOffset(0x36)] public sbyte ClassJob;
    [FieldOffset(0x37)] public sbyte Range;
    [FieldOffset(0x38)] public sbyte DeadTargetBehaviour;
    /// <remarks>AttackType</remarks>
    [FieldOffset(0x39)] public sbyte AttackType;
    [FieldOffset(0x3A)] public BitField3AFlags BitField3A;
    public bool Unknown8 => BitField3A.HasFlag(BitField3AFlags.Unknown8);
    public bool IsRoleAction => BitField3A.HasFlag(BitField3AFlags.IsRoleAction);
    public bool CanTargetSelf => BitField3A.HasFlag(BitField3AFlags.CanTargetSelf);
    public bool CanTargetParty => BitField3A.HasFlag(BitField3AFlags.CanTargetParty);
    public bool CanTargetAlliance => BitField3A.HasFlag(BitField3AFlags.CanTargetAlliance);
    public bool CanTargetHostile => BitField3A.HasFlag(BitField3AFlags.CanTargetHostile);
    public bool CanTargetAlly => BitField3A.HasFlag(BitField3AFlags.CanTargetAlly);
    public bool Unknown10 => BitField3A.HasFlag(BitField3AFlags.Unknown10);
    [FieldOffset(0x3B)] public BitField3BFlags BitField3B;
    public bool TargetArea => BitField3B.HasFlag(BitField3BFlags.TargetArea);
    public bool CanTargetOwnPet => BitField3B.HasFlag(BitField3BFlags.CanTargetOwnPet);
    public bool CanTargetPartyPet => BitField3B.HasFlag(BitField3BFlags.CanTargetPartyPet);
    public bool RequiresLineOfSight => BitField3B.HasFlag(BitField3BFlags.RequiresLineOfSight);
    public bool NeedToFaceTarget => BitField3B.HasFlag(BitField3BFlags.NeedToFaceTarget);
    public bool Unknown14 => BitField3B.HasFlag(BitField3BFlags.Unknown14);
    public bool PreservesCombo => BitField3B.HasFlag(BitField3BFlags.PreservesCombo);
    public bool Unknown15 => BitField3B.HasFlag(BitField3BFlags.Unknown15);
    [FieldOffset(0x3C)] public BitField3CFlags BitField3C;
    public bool AffectsPosition => BitField3C.HasFlag(BitField3CFlags.AffectsPosition);
    public bool IsPvP => BitField3C.HasFlag(BitField3CFlags.IsPvP);
    public bool Unknown16 => BitField3C.HasFlag(BitField3CFlags.Unknown16);
    public bool LogCastMessage => BitField3C.HasFlag(BitField3CFlags.LogCastMessage);
    public bool Unknown18 => BitField3C.HasFlag(BitField3CFlags.Unknown18);
    public bool LogMissMessage => BitField3C.HasFlag(BitField3CFlags.LogMissMessage);
    public bool LogActionMessage => BitField3C.HasFlag(BitField3CFlags.LogActionMessage);
    public bool Unknown21 => BitField3C.HasFlag(BitField3CFlags.Unknown21);
    [FieldOffset(0x3D)] public BitField3DFlags BitField3D;
    public bool Unknown22 => BitField3D.HasFlag(BitField3DFlags.Unknown22);
    public bool Unknown23 => BitField3D.HasFlag(BitField3DFlags.Unknown23);
    public bool Unknown24 => BitField3D.HasFlag(BitField3DFlags.Unknown24);
    public bool Unknown25 => BitField3D.HasFlag(BitField3DFlags.Unknown25);
    public bool IsPlayerAction => BitField3D.HasFlag(BitField3DFlags.IsPlayerAction);

    [Flags]
    public enum BitField3AFlags : byte {
    	Unknown8 = 1 << 0,
    	IsRoleAction = 1 << 1,
    	CanTargetSelf = 1 << 2,
    	CanTargetParty = 1 << 3,
    	CanTargetAlliance = 1 << 4,
    	CanTargetHostile = 1 << 5,
    	CanTargetAlly = 1 << 6,
    	Unknown10 = 1 << 7,
    }
    [Flags]
    public enum BitField3BFlags : byte {
    	TargetArea = 1 << 0,
    	CanTargetOwnPet = 1 << 1,
    	CanTargetPartyPet = 1 << 2,
    	RequiresLineOfSight = 1 << 3,
    	NeedToFaceTarget = 1 << 4,
    	Unknown14 = 1 << 5,
    	PreservesCombo = 1 << 6,
    	Unknown15 = 1 << 7,
    }
    [Flags]
    public enum BitField3CFlags : byte {
    	AffectsPosition = 1 << 0,
    	IsPvP = 1 << 1,
    	Unknown16 = 1 << 2,
    	LogCastMessage = 1 << 3,
    	Unknown18 = 1 << 4,
    	LogMissMessage = 1 << 5,
    	LogActionMessage = 1 << 6,
    	Unknown21 = 1 << 7,
    }
    [Flags]
    public enum BitField3DFlags : byte {
    	Unknown22 = 1 << 0,
    	Unknown23 = 1 << 1,
    	Unknown24 = 1 << 2,
    	Unknown25 = 1 << 3,
    	IsPlayerAction = 1 << 4,
    }
}
