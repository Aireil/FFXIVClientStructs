// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x3C)]
public unsafe partial struct Transformation {
    [FieldOffset(0x00)] public float Speed;
    [FieldOffset(0x04)] public float Scale;
    /// <remarks>Action</remarks>
    [FieldOffset(0x08)] public uint Action6;
    /// <remarks>BNpcCustomize</remarks>
    [FieldOffset(0x0C)] public int BNpcCustomize;
    /// <remarks>NpcEquip</remarks>
    [FieldOffset(0x10)] public int NpcEquip;
    /// <remarks>BNpcName</remarks>
    [FieldOffset(0x14)] public ushort BNpcName;
    /// <remarks>Action</remarks>
    [FieldOffset(0x16)] public ushort Action0;
    /// <remarks>Action</remarks>
    [FieldOffset(0x18)] public ushort Action1;
    /// <remarks>Action</remarks>
    [FieldOffset(0x1A)] public ushort Action2;
    /// <remarks>Action</remarks>
    [FieldOffset(0x1C)] public ushort Action3;
    /// <remarks>Action</remarks>
    [FieldOffset(0x1E)] public ushort Action4;
    /// <remarks>Action</remarks>
    [FieldOffset(0x20)] public ushort Action5;
    /// <remarks>RPParameter</remarks>
    [FieldOffset(0x22)] public ushort RPParameter;
    /// <remarks>Action</remarks>
    [FieldOffset(0x24)] public ushort RemoveAction;
    /// <remarks>VFX</remarks>
    [FieldOffset(0x26)] public ushort StartVFX;
    /// <remarks>VFX</remarks>
    [FieldOffset(0x28)] public ushort EndVFX;
    /// <remarks>Action</remarks>
    [FieldOffset(0x2A)] public ushort Action7;
    /// <remarks>ModelChara</remarks>
    [FieldOffset(0x2C)] public short Model;
    [FieldOffset(0x2E)] public byte Unknown0;
    [FieldOffset(0x2F)] public byte Unknown1;
    [FieldOffset(0x30)] public byte Unknown2;
    [FieldOffset(0x31)] public sbyte Unknown3;
    [FieldOffset(0x32)] public sbyte Unknown4;
    [FieldOffset(0x33)] public bool ExHotbarEnableConfig;
    [FieldOffset(0x34)] public bool Unknown5;
    [FieldOffset(0x35)] public bool Unknown6;
    [FieldOffset(0x36)] public bool Unknown7;
    [FieldOffset(0x37)] public bool Unknown8;
    [FieldOffset(0x38)] public bool Unknown9;
    [FieldOffset(0x39)] public bool Unknown10;
    [FieldOffset(0x3A)] public BitField3AFlags BitField3A;
    public bool Unknown11 => BitField3A.HasFlag(BitField3AFlags.Unknown11);
    public bool Unknown12 => BitField3A.HasFlag(BitField3AFlags.Unknown12);
    public bool Unknown13 => BitField3A.HasFlag(BitField3AFlags.Unknown13);
    public bool IsPvP => BitField3A.HasFlag(BitField3AFlags.IsPvP);
    public bool IsEvent => BitField3A.HasFlag(BitField3AFlags.IsEvent);
    public bool PlayerCamera => BitField3A.HasFlag(BitField3AFlags.PlayerCamera);
    public bool Unknown14 => BitField3A.HasFlag(BitField3AFlags.Unknown14);
    public bool Unknown15 => BitField3A.HasFlag(BitField3AFlags.Unknown15);
    [FieldOffset(0x3B)] public BitField3BFlags BitField3B;
    public bool Unknown16 => BitField3B.HasFlag(BitField3BFlags.Unknown16);
    public bool Unknown17 => BitField3B.HasFlag(BitField3BFlags.Unknown17);

    [Flags]
    public enum BitField3AFlags : byte {
    	Unknown11 = 1 << 0,
    	Unknown12 = 1 << 1,
    	Unknown13 = 1 << 2,
    	IsPvP = 1 << 3,
    	IsEvent = 1 << 4,
    	PlayerCamera = 1 << 5,
    	Unknown14 = 1 << 6,
    	Unknown15 = 1 << 7,
    }
    [Flags]
    public enum BitField3BFlags : byte {
    	Unknown16 = 1 << 0,
    	Unknown17 = 1 << 1,
    }
}
