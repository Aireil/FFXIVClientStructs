// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x54)]
public unsafe partial struct Mount {
    [FieldOffset(0x00)] public int Singular_Offset;
    [FieldOffset(0x04)] public int Plural_Offset;
    [FieldOffset(0x08)] public sbyte Adjective;
    [FieldOffset(0x09)] public sbyte PossessivePronoun;
    [FieldOffset(0x0A)] public sbyte StartsWithVowel;
    [FieldOffset(0x0B)] public sbyte Unknown0;
    [FieldOffset(0x0C)] public sbyte Pronoun;
    [FieldOffset(0x0D)] public sbyte Article;
    [FieldOffset(0x10)] public int Unknown1_Offset;
    [FieldOffset(0x14)] public int Unknown2_Offset;
    [FieldOffset(0x18)] public int Unknown3_Offset;
    /// <remarks>ModelChara</remarks>
    [FieldOffset(0x1C)] public int ModelChara;
    [FieldOffset(0x20)] public int EquipHead;
    [FieldOffset(0x24)] public int EquipBody;
    [FieldOffset(0x28)] public int EquipLeg;
    [FieldOffset(0x2C)] public int EquipFoot;
    [FieldOffset(0x30)] public ushort Unknown4;
    /// <remarks>BGM</remarks>
    [FieldOffset(0x32)] public ushort RideBGM;
    [FieldOffset(0x34)] public ushort Icon;
    [FieldOffset(0x36)] public ushort UIPriority;
    /// <remarks>MountAction</remarks>
    [FieldOffset(0x38)] public ushort MountAction;
    [FieldOffset(0x3A)] public ushort Unknown_70_1;
    [FieldOffset(0x3C)] public ushort Unknown_70_2;
    [FieldOffset(0x3E)] public short Order;
    /// <remarks>MountFlyingCondition</remarks>
    [FieldOffset(0x40)] public byte FlyingCondition;
    [FieldOffset(0x41)] public byte Unknown5;
    [FieldOffset(0x42)] public byte Unknown6;
    [FieldOffset(0x43)] public byte Unknown7;
    [FieldOffset(0x44)] public byte IsFlying;
    [FieldOffset(0x45)] public byte Unknown8;
    /// <remarks>MountCustomize</remarks>
    [FieldOffset(0x46)] public byte MountCustomize;
    [FieldOffset(0x47)] public byte ExitMoveDist;
    [FieldOffset(0x48)] public byte ExitMoveSpeed;
    [FieldOffset(0x49)] public byte RadiusRate;
    [FieldOffset(0x4A)] public byte BaseMotionSpeed_Run;
    [FieldOffset(0x4B)] public byte BaseMotionSpeed_Walk;
    [FieldOffset(0x4C)] public byte Unknown9;
    [FieldOffset(0x4D)] public byte ExtraSeats;
    [FieldOffset(0x4E)] public byte Unknown10;
    [FieldOffset(0x4F)] public byte Unknown11;
    [FieldOffset(0x50)] public BitField50Flags BitField50;
    public bool Unknown12 => BitField50.HasFlag(BitField50Flags.Unknown12);
    public bool IsEmote => BitField50.HasFlag(BitField50Flags.IsEmote);
    public bool IsAirborne => BitField50.HasFlag(BitField50Flags.IsAirborne);
    public bool ExHotbarEnableConfig => BitField50.HasFlag(BitField50Flags.ExHotbarEnableConfig);
    public bool UseEP => BitField50.HasFlag(BitField50Flags.UseEP);
    public bool Unknown13 => BitField50.HasFlag(BitField50Flags.Unknown13);
    public bool IsImmobile => BitField50.HasFlag(BitField50Flags.IsImmobile);
    public bool Unknown14 => BitField50.HasFlag(BitField50Flags.Unknown14);
    [FieldOffset(0x51)] public bool Unknown15;

    [Flags]
    public enum BitField50Flags : byte {
    	Unknown12 = 1 << 0,
    	IsEmote = 1 << 1,
    	IsAirborne = 1 << 2,
    	ExHotbarEnableConfig = 1 << 3,
    	UseEP = 1 << 4,
    	Unknown13 = 1 << 5,
    	IsImmobile = 1 << 6,
    	Unknown14 = 1 << 7,
    }
}
