// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x24)]
public unsafe partial struct Map {
    [FieldOffset(0x00)] public int Id_Offset;
    [FieldOffset(0x04)] public uint DiscoveryFlag;
    [FieldOffset(0x08)] public ushort MapMarkerRange;
    [FieldOffset(0x0A)] public ushort SizeFactor;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x0C)] public ushort PlaceNameRegion;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x0E)] public ushort PlaceName;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x10)] public ushort PlaceNameSub;
    /// <remarks>TerritoryType</remarks>
    [FieldOffset(0x12)] public ushort TerritoryType;
    [FieldOffset(0x14)] public short OffsetX;
    [FieldOffset(0x16)] public short OffsetY;
    [FieldOffset(0x18)] public short DiscoveryIndex;
    /// <remarks>MapCondition</remarks>
    [FieldOffset(0x1A)] public byte MapCondition;
    [FieldOffset(0x1B)] public byte PriorityCategoryUI;
    [FieldOffset(0x1C)] public byte PriorityUI;
    [FieldOffset(0x1D)] public byte Hierarchy;
    [FieldOffset(0x1E)] public byte Unknown0;
    [FieldOffset(0x1F)] public sbyte MapIndex;
    [FieldOffset(0x20)] public BitField20Flags BitField20;
    public bool DiscoveryArrayByte => BitField20.HasFlag(BitField20Flags.DiscoveryArrayByte);
    public bool IsEvent => BitField20.HasFlag(BitField20Flags.IsEvent);
    public bool Unknown1 => BitField20.HasFlag(BitField20Flags.Unknown1);

    [Flags]
    public enum BitField20Flags : byte {
    	DiscoveryArrayByte = 1 << 0,
    	IsEvent = 1 << 1,
    	Unknown1 = 1 << 2,
    }
}
