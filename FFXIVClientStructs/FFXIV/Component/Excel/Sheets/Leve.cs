// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x58)]
public unsafe partial struct Leve {
    [FieldOffset(0x00)] public int Name_Offset;
    [FieldOffset(0x04)] public int Description_Offset;
    [FieldOffset(0x08)] public float ExpFactor;
    [FieldOffset(0x0C)] public uint ExpReward;
    [FieldOffset(0x10)] public uint GilReward;
    /// <remarks>LeveRewardItem</remarks>
    [FieldOffset(0x14)] public ushort LeveRewardItem;
    /// <remarks>JournalGenre</remarks>
    [FieldOffset(0x18)] public uint JournalGenre;
    /// <remarks>Level</remarks>
    [FieldOffset(0x1C)] public uint LevelLevemete;
    /// <remarks>Level</remarks>
    [FieldOffset(0x20)] public uint LevelStart;
    /// <remarks>LeveClient</remarks>
    [FieldOffset(0x24)] public int LeveClient;
    /// <remarks>LeveAssignmentType</remarks>
    [FieldOffset(0x28)] public int LeveAssignmentType;
    /// <remarks>Town</remarks>
    [FieldOffset(0x2C)] public int Town;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x30)] public int PlaceNameStart;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x34)] public int PlaceNameIssued;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x38)] public int PlaceNameStartZone;
    [FieldOffset(0x3C)] public int IconCityState;
    /// <remarks>CraftLeve, CompanyLeve, GatheringLeve, BattleLeve</remarks>
    [FieldOffset(0x40)] public int DataId;
    [FieldOffset(0x44)] public int IconIssuer;
    [FieldOffset(0x48)] public ushort ClassJobLevel;
    /// <remarks>FishingSpot</remarks>
    [FieldOffset(0x4A)] public ushort FishingSpot;
    /// <remarks>BGM</remarks>
    [FieldOffset(0x4C)] public ushort BGM;
    [FieldOffset(0x4E)] public byte Unknown1;
    [FieldOffset(0x4F)] public byte TimeLimit;
    [FieldOffset(0x50)] public byte AllowanceCost;
    [FieldOffset(0x51)] public byte Unknown2;
    /// <remarks>ClassJobCategory</remarks>
    [FieldOffset(0x52)] public byte ClassJobCategory;
    [FieldOffset(0x53)] public byte MaxDifficulty;
    /// <remarks>LeveVfx</remarks>
    [FieldOffset(0x54)] public byte LeveVfx;
    /// <remarks>LeveVfx</remarks>
    [FieldOffset(0x55)] public byte LeveVfxFrame;
    [FieldOffset(0x56)] public BitField56Flags BitField56;
    public bool CanCancel => BitField56.HasFlag(BitField56Flags.CanCancel);
    public bool LockedLeve => BitField56.HasFlag(BitField56Flags.LockedLeve);

    [Flags]
    public enum BitField56Flags : byte {
    	CanCancel = 1 << 0,
    	LockedLeve = 1 << 1,
    }
}
