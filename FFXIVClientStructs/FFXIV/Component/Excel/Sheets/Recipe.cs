// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[GenerateInterop]
[StructLayout(LayoutKind.Explicit, Size = 0x64)]
public unsafe partial struct Recipe {
    [FieldOffset(0x00)] public uint RequiredQuality;
    /// <remarks>Quest</remarks>
    [FieldOffset(0x04)] public uint Quest;
    [FieldOffset(0x08)] public int Number;
    /// <remarks>CraftType</remarks>
    [FieldOffset(0x0C)] public int CraftType;
    /// <remarks>Item</remarks>
    [FieldOffset(0x10)] public int ItemResult;
    [FieldOffset(0x14), FixedSizeArray] internal FixedSizeArray8<int> _ingredient;
    /// <remarks>Status</remarks>
    [FieldOffset(0x34)] public int StatusRequired;
    /// <remarks>Item</remarks>
    [FieldOffset(0x38)] public int ItemRequired;
    /// <remarks>RecipeLevelTable</remarks>
    [FieldOffset(0x3C)] public ushort RecipeLevelTable;
    /// <remarks>RecipeNotebookList</remarks>
    [FieldOffset(0x3E)] public ushort RecipeNotebookList;
    [FieldOffset(0x40)] public ushort DisplayPriority;
    [FieldOffset(0x42)] public ushort DifficultyFactor;
    [FieldOffset(0x44)] public ushort QualityFactor;
    [FieldOffset(0x46)] public ushort DurabilityFactor;
    [FieldOffset(0x48)] public ushort RequiredCraftsmanship;
    [FieldOffset(0x4A)] public ushort RequiredControl;
    [FieldOffset(0x4C)] public ushort QuickSynthCraftsmanship;
    [FieldOffset(0x4E)] public ushort QuickSynthControl;
    /// <remarks>SecretRecipeBook</remarks>
    [FieldOffset(0x50)] public ushort SecretRecipeBook;
    [FieldOffset(0x52)] public ushort CollectableMetadata;
    [FieldOffset(0x54)] public ushort PatchNumber;
    [FieldOffset(0x56)] public byte AmountResult;
    [FieldOffset(0x57), FixedSizeArray] internal FixedSizeArray8<byte> _amountIngredient;
    [FieldOffset(0x5F)] public byte MaterialQualityFactor;
    [FieldOffset(0x60)] public byte CollectableMetadataKey;
    [FieldOffset(0x61)] public BitField61Flags BitField61;
    public bool IsSecondary => BitField61.HasFlag(BitField61Flags.IsSecondary);
    public bool CanQuickSynth => BitField61.HasFlag(BitField61Flags.CanQuickSynth);
    public bool CanHq => BitField61.HasFlag(BitField61Flags.CanHq);
    public bool ExpRewarded => BitField61.HasFlag(BitField61Flags.ExpRewarded);
    public bool IsSpecializationRequired => BitField61.HasFlag(BitField61Flags.IsSpecializationRequired);
    public bool IsExpert => BitField61.HasFlag(BitField61Flags.IsExpert);

    [Flags]
    public enum BitField61Flags : byte {
    	IsSecondary = 1 << 0,
    	CanQuickSynth = 1 << 1,
    	CanHq = 1 << 2,
    	ExpRewarded = 1 << 3,
    	IsSpecializationRequired = 1 << 4,
    	IsExpert = 1 << 5,
    }
}
