// <auto-generated/>
namespace FFXIVClientStructs.FFXIV.Component.Excel.Sheets;

[StructLayout(LayoutKind.Explicit, Size = 0x40)]
public unsafe partial struct TerritoryType {
    [FieldOffset(0x00)] public int Name_Offset;
    [FieldOffset(0x04)] public int Bg_Offset;
    /// <remarks>ArrayEventHandler</remarks>
    [FieldOffset(0x08)] public uint ArrayEventHandler;
    [FieldOffset(0x0C)] public int PlaceNameRegionIcon;
    [FieldOffset(0x10)] public int PlaceNameIcon;
    /// <remarks>Aetheryte</remarks>
    [FieldOffset(0x14)] public int Aetheryte;
    [FieldOffset(0x18)] public int FixedTime;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x1C)] public ushort PlaceNameRegion;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x1E)] public ushort PlaceNameZone;
    /// <remarks>PlaceName</remarks>
    [FieldOffset(0x20)] public ushort PlaceName;
    /// <remarks>Map</remarks>
    [FieldOffset(0x22)] public ushort Map;
    /// <remarks>ContentFinderCondition</remarks>
    [FieldOffset(0x24)] public ushort ContentFinderCondition;
    /// <remarks>BGM, BGMSituation</remarks>
    [FieldOffset(0x26)] public ushort BGM;
    /// <remarks>QuestBattle</remarks>
    [FieldOffset(0x28)] public ushort QuestBattle;
    [FieldOffset(0x2A)] public ushort Resident;
    /// <remarks>NotoriousMonsterTerritory</remarks>
    [FieldOffset(0x2C)] public ushort NotoriousMonsterTerritory;
    [FieldOffset(0x2E)] public byte BattalionMode;
    /// <remarks>LoadingImage</remarks>
    [FieldOffset(0x2F)] public byte LoadingImage;
    [FieldOffset(0x30)] public byte ExclusiveType;
    /// <remarks>TerritoryIntendedUse</remarks>
    [FieldOffset(0x31)] public byte TerritoryIntendedUse;
    [FieldOffset(0x32)] public byte WeatherRate;
    [FieldOffset(0x33)] public byte Unknown1;
    /// <remarks>ExVersion</remarks>
    [FieldOffset(0x34)] public byte ExVersion;
    [FieldOffset(0x35)] public byte Unknown2;
    [FieldOffset(0x36)] public byte Unknown3;
    [FieldOffset(0x37)] public byte Unknown4;
    /// <remarks>MountSpeed</remarks>
    [FieldOffset(0x38)] public byte MountSpeed;
    [FieldOffset(0x39)] public byte Unknown5;
    [FieldOffset(0x3A)] public sbyte AchievementIndex;
    [FieldOffset(0x3B)] public BitField3BFlags BitField3B;
    public bool Unknown6 => BitField3B.HasFlag(BitField3BFlags.Unknown6);
    public bool Unknown7 => BitField3B.HasFlag(BitField3BFlags.Unknown7);
    public bool PCSearch => BitField3B.HasFlag(BitField3BFlags.PCSearch);
    public bool Stealth => BitField3B.HasFlag(BitField3BFlags.Stealth);
    public bool Mount => BitField3B.HasFlag(BitField3BFlags.Mount);
    public bool Unknown8 => BitField3B.HasFlag(BitField3BFlags.Unknown8);
    public bool IsPvpZone => BitField3B.HasFlag(BitField3BFlags.IsPvpZone);
    public bool Unknown9 => BitField3B.HasFlag(BitField3BFlags.Unknown9);
    [FieldOffset(0x3C)] public BitField3CFlags BitField3C;
    public bool Unknown10 => BitField3C.HasFlag(BitField3CFlags.Unknown10);
    public bool Unknown11 => BitField3C.HasFlag(BitField3CFlags.Unknown11);
    public bool Unknown12 => BitField3C.HasFlag(BitField3CFlags.Unknown12);
    public bool Unknown13 => BitField3C.HasFlag(BitField3CFlags.Unknown13);
    public bool Unknown14 => BitField3C.HasFlag(BitField3CFlags.Unknown14);
    public bool Unknown15 => BitField3C.HasFlag(BitField3CFlags.Unknown15);

    [Flags]
    public enum BitField3BFlags : byte {
    	Unknown6 = 1 << 0,
    	Unknown7 = 1 << 1,
    	PCSearch = 1 << 2,
    	Stealth = 1 << 3,
    	Mount = 1 << 4,
    	Unknown8 = 1 << 5,
    	IsPvpZone = 1 << 6,
    	Unknown9 = 1 << 7,
    }
    [Flags]
    public enum BitField3CFlags : byte {
    	Unknown10 = 1 << 0,
    	Unknown11 = 1 << 1,
    	Unknown12 = 1 << 2,
    	Unknown13 = 1 << 3,
    	Unknown14 = 1 << 4,
    	Unknown15 = 1 << 5,
    }
}
