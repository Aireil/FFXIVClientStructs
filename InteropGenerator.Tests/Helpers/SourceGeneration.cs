using System.Text;

namespace InteropGenerator.Tests.Helpers;

internal static class SourceGeneration {
    public static (string, string) GetInitializerSource(string containingNamespace, string containingType, IEnumerable<string> functionNames) {
        StringBuilder stringBuilder = new();
        stringBuilder.AppendLine("// <auto-generated/>");
        stringBuilder.AppendLine("namespace InteropGeneratorTesting;");
        stringBuilder.AppendLine("public static class Interop");
        stringBuilder.AppendLine("{");
        stringBuilder.AppendLine("    public static void InitializeAddresses()");
        stringBuilder.AppendLine("    {");
        foreach (string functionName in functionNames) {
            string namespaceWithDot = string.IsNullOrEmpty(containingNamespace) ? string.Empty : containingNamespace + ".";
            stringBuilder.AppendLine($"""        InteropGenerator.Runtime.Resolver.GetInstance.RegisterAddress(global::{namespaceWithDot}{containingType}.Addresses.{functionName});""");
        }
        stringBuilder.AppendLine("    }");
        stringBuilder.Append('}');
        return ("InteropGeneratorTesting.Interop.InteropGenerator.g.cs", stringBuilder.ToString());
    }
}
