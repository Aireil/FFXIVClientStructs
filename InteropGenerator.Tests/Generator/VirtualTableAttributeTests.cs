using InteropGenerator.Tests.Helpers;
using Xunit;
using VerifyIG = InteropGenerator.Tests.Helpers.IncrementalGeneratorVerifier<InteropGenerator.Generator.InteropGenerator>;

namespace InteropGenerator.Tests.Generator;

public class VirtualTableAttributeTests {
    [Fact]
    public async Task GenerateStaticVirtualTable() {
        const string code = """
                            [StructLayout(LayoutKind.Explicit)]
                            [GenerateInterop]
                            [VirtualTable("E8 ?? ?? ?? ??", 1)]
                            public partial struct TestStruct
                            {
                            }
                            """;

        const string result = """
                              // <auto-generated/>
                              unsafe partial struct TestStruct
                              {
                                  public static class Addresses
                                  {
                                      public static readonly Address StaticVirtualTable = new Address("TestStruct.StaticVirtualTable", "E8 ?? ?? ?? ?? ?? ?? ??", 1, new ulong[] {0x00000000000000E8}, new ulong[] {0x00000000000000FF}, 0);
                                  }
                                  [StructLayout(LayoutKind.Explicit)]
                                  public unsafe partial struct TestStructVirtualTable
                                  {
                                  }
                                  [FieldOffset(0)] public TestStructVirtualTable* VirtualTable;
                                  public static TestStructVirtualTable* StaticVirtualTablePointer => (TestStructVirtualTable*)Addresses.StaticVirtualTable.Value;
                              }
                              """;

        await VerifyIG.VerifyGeneratorAsync(
            code,
            ("TestStruct.InteropGenerator.g.cs", result),
            SourceGeneration.GetInitializerSource(string.Empty, "TestStruct", ["StaticVirtualTable"]));
    }
}
